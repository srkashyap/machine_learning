#!/usr/bin/env python
# coding: utf-8

# In[25]:


import matplotlib.pyplot as plt
from PIL import Image
import numpy as np
import tqdm
import copy
import sys
import math
from sklearn.cluster import KMeans
from sklearn.model_selection import KFold


# In[3]:


def visualize(im1, im2, k):
	# displays two images
    im1 = im1.astype('uint8')
    im2 = im2.astype('uint8')
    f = plt.figure()
    f.add_subplot(1,2, 1)
    plt.imshow(im1)
    plt.axis('off')
    plt.title('Original')
    f.add_subplot(1,2, 2)
    plt.imshow(im2)
    plt.axis('off')
    plt.title('Cluster: '+str(k))
    plt.savefig('k_means_'+str(k)+'.jpg')
    plt.show()
    return None


# In[4]:



def MSE(Im1, Im2):
	# computes error
	Diff_Im = Im2-Im1
	Diff_Im = np.power(Diff_Im, 2)
	Diff_Im = np.sum(Diff_Im, axis=2)
	Diff_Im = np.sqrt(Diff_Im)
	sum_diff = np.sum(np.sum(Diff_Im))
	avg_error = sum_diff / float(Im1.shape[0]*Im2.shape[1])
	return avg_error


# In[8]:


# grab the image
original_image = np.array(Image.open('../../Data/singapore.jpg'))
print(original_image.shape)


# In[9]:


new_image = original_image.reshape(original_image.shape[0] *original_image.shape[1], 3)
new_image.shape


# In[20]:


k_m = KMeans(n_clusters=2,random_state=0).fit(new_image)
y = k_m.cluster_centers_[k_m.predict(new_image)]
clustered_image = y.reshape(original_image.shape)
visualize(original_image,clustered_image,10)


# In[21]:


y.shape


# In[27]:


k_mean = {2,5,10,25,50,100,200}
actual_size = original_image.shape[0] *original_image.shape[1] * 24
for k in k_mean:
    k_m = KMeans(n_clusters=k,random_state=0).fit(new_image)
    y = k_m.cluster_centers_[k_m.predict(new_image)]
    clustered_image = y.reshape(original_image.shape)
    error = MSE(original_image,clustered_image)
    print("Reconstruction error for ",k,"is :",error)
    cluster_size = 32*3*k + clustered_image.shape[0] *clustered_image.shape[1] * math.ceil(np.log2(k))
    compression_rate = (1-(cluster_size/actual_size))*100
    print("Compression rate for cluster ",k,"is:",compression_rate)
    visualize(original_image,clustered_image,k)

